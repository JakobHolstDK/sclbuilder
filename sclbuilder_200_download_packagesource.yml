---
- name: Download pypi packages
  hosts: prod_sclbuilder_worker
  vars_files:
    - vars.yml
  tasks:
  - name: Simple select query to acme db
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: SELECT version()
    delegate_to: localhost

  - name: Select the all packages where packagesourcefileurl is NULL
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select id,packagename,packageversion,packagestatus from  projects_package where packagesourcefileurl IS NULL;
      as_single_query: yes 
    register: sourceurlmissingpackages
    delegate_to: localhost
    tags:
      - checkstatus

  - name: Set them to building
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_user: "sclbuilder"
      login_host: sclbuilder
      login_password: "django2know"
      query: >-
        update projects_package set packagestatus = 'Building', 
        packagesourcefilestatus = 'Building' , 
        packagesourcefileurl = '{{ repourl }}{{ repopath }}/SOURCES/{{ item.packagename }}-{{ item.packageversion}}.tar.gz'  
        where id = {{ item.id }} ; 
      as_single_query: yes
    register: adoptedpackages
    with_items:
    - "{{ sourceurlmissingpackages.query_all_results.0 }}"
    delegate_to: localhost
    tags:
      - checkstatus


  - name: Select the new ones 
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select * from  projects_package where packagesourcefilestatus 	IS NULL;;
      as_single_query: yes
    register: newpackages
    delegate_to: localhost
    tags:
      - checkstatus 
  
  - name: Set them to building
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: "update projects_package set packagesourcefilestatus = 'Building'  where id = {{ item.id }} ; " 
      as_single_query: yes 
      #query: "update projects_package set packagesourcefilestatus = 'Building', packagesourcefileurl = '{{ repourl }}{{ repopath }}{{ item.packagename }}-{{ item.packageversion}}.tar.gz'  where id = {{ item.id }} ; " 
    register: adoptedpackages
    with_items:
    - "{{ newpackages.query_all_results.0 }}"
    delegate_to: localhost
    tags:
      - checkstatus

  - name: Select the building candidates
    community.postgresql.postgresql_query:
      login_host: sclbuilder
      db: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select packagename, packageversion from  projects_package where packagesourcefilestatus = 'Building';
      as_single_query: yes
    register: buildingsource
    delegate_to: localhost
    tags:
      - checkstatus
 
  - name: Run download on our targets
    command: "/usr/local/bin/sclbuilder_download.sh {{ item.packagename }}=={{ item.packageversion }}"
    register: download
    with_items: "{{ buildingsource.query_all_results.0 }}"
    ignore_errors: yes
    async: 10
    poll: 0

  - name: Check sync status
    async_status:
      jid: "{{ async_result_item.ansible_job_id }}"
    loop: "{{ download.results }}"
    loop_control:
      loop_var: "async_result_item"
    register: async_poll_results
    until: async_poll_results.finished
    ignore_errors: yes
    retries: 30
    
  - name: Check that downloads are available at {{ repourl }}
    uri:
      url: "{{ repourl }}{{ repopath }}/SOURCES/{{ item.packagename }}-{{ item.packageversion }}.tar.gz"
    register: urlcheck
    ignore_errors: yes
    with_items:
    - "{{ buildingsource.query_all_results.0 }}"
    tags:
      - checkstatus
    async: 10
    poll: 0
    delegate_to: localhost

  - name: Check sync status
    async_status:
      jid: "{{ async_result_item.ansible_job_id }}"
    loop: "{{ urlcheck.results }}"
    loop_control:
      loop_var: "async_result_item"
    register: async_poll_results
    until: async_poll_results.finished
    retries: 30
    delegate_to: localhost
    ignore_errors: yes
    tags:
      - checkstatus

  - name: update database if based on curl
    community.postgresql.postgresql_query:
      login_host: sclbuilder
      db: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: "update projects_package set packagesourcefilestatus = 'Completed' where  packagesourcefileurl = '{{ item.url }}' ; " 
    register: completed
    become: yes
    become_user: sclbuilder
    with_items:
      - "{{ async_poll_results.results }}"
    when:  item.status == 200
    delegate_to: localhost
    tags:
      - checkstatus

  - debug: 
      var: completed
