---
- name: Initial database seed
  hosts: prod_sclbuilder_worker
  gather_facts: no
  vars_files:
    - vars.yml
  tasks:
  - name: Simple select query to acme db
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: SELECT version()
    delegate_to: localhost

  - name: Select the all packages where packageorgspecfileurl is NULL
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select id,packagename,packageversion from  projects_package where packageorgspecfileurl IS NULL;
      as_single_query: yes 
    register: orgspecurlmissingpackages
    delegate_to: localhost

  - name: Set them to building
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_user: "sclbuilder"
      login_host: sclbuilder
      login_password: "django2know"
      query: "update projects_package set packageorgspecfilestatus = 'Building' , packageorgspecfileurl = '{{ repourl }}{{ repopath }}/SPECS/{{ item.packagename }}-{{ item.packageversion}}.original.spec'  where id = {{ item.id }} ; " 
      as_single_query: yes
    register: adoptedpackages
    with_items:
    - "{{ orgspecurlmissingpackages.query_all_results.0 }}"
    delegate_to: localhost


  - name: Select the new ones 
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select * from  projects_package where packageorgspecfilestatus 	IS NULL;;
      as_single_query: yes
    register: newpackages
    delegate_to: localhost
    tags:
      - checkstatus
  
  - name: Set them to building
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: "update projects_package set packageorgspecfilestatus = 'Building'  where id = {{ item.id }} ; " 
      as_single_query: yes 
    register: adoptedpackages
    with_items:
    - "{{ newpackages.query_all_results.0 }}"
    delegate_to: localhost    


  - name: Select the building candidates
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: select packagename, packageversion from  projects_package where packageorgspecfilestatus = 'Building';
      as_single_query: yes 
    register: buildingresult
    delegate_to: localhost 
    tags:
      - checkstatus
  
  - name: Run sclbuilder_create_original_specfile.sh on our targets
    command: "/usr/local/bin/sclbuilder_create_original_specfile.sh {{ item.packagename }}=={{ item.packageversion }}"
    register: specfiles
    with_items:
    - "{{ buildingresult.query_all_results.0 }}"
    ignore_errors: yes

  - name: Run download on our targets
    uri:
      url: "{{ repourl }}{{ repopath }}/SPECS/{{ item.packagename }}-{{ item.packageversion }}.original.spec"
    register: urlcheck
    with_items:
    - "{{ buildingresult.query_all_results.0 }}"
    tags:
      - checkstatus
    async: 10
    poll: 0
    delegate_to: localhost
    ignore_errors: yes 

  - debug: 
      var: urlcheck

  - name: Check sync status
    async_status:
      jid: "{{ async_result_item.ansible_job_id }}"
    loop: "{{ urlcheck.results }}"
    loop_control:
      loop_var: "async_result_item"
    register: async_poll_results
    until: async_poll_results.finished
    retries: 30
    delegate_to: localhost
    ignore_errors: yes
    tags:
      - checkstatus

  - name: update database if based on curl
    community.postgresql.postgresql_query:
      db: sclbuilder
      login_host: sclbuilder
      login_user: "sclbuilder"
      login_password: "django2know"
      query: "update projects_package set packageorgspecfilestatus = 'Completed' where  packageorgspecfileurl = '{{ item.url }}' ; " 
    register: result
    with_items:
      - "{{ async_poll_results.results }}"
    when:  item.status == 200
    delegate_to: localhost
    tags:
      - checkstatus


  - debug: 
      var: result
